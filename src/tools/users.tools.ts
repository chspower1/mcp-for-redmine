import { z } from "zod";
import { createUser, getUser, listUsers, updateUser, deleteUser } from "../api/users.api";
import { Tool } from "../types/types"; // Assuming a Tool type exists

export const createUserTool: Tool = {
  name: "redmine_create-user",
  description: "Creates a new user in Redmine.",
  parameters: z.object({
    login: z.string().describe("The user's login name."),
    firstname: z.string().describe("The user's first name."),
    lastname: z.string().describe("The user's last name."),
    mail: z
      .string()
      .email("This must be a valid email address.")
      .describe("The user's email address."),
    password: z
      .string()
      .min(8)
      .optional()
      .describe(
        "The user's password. Must be at least 8 characters. Cannot be used with 'generate_password'."
      ),
    generate_password: z
      .boolean()
      .optional()
      .describe(
        "If true, a random password will be generated by Redmine. Cannot be used with 'password'."
      ),
  }),
  execute: async ({ login, firstname, lastname, mail, password, generate_password }) => {
    if (password && generate_password) {
      throw new Error("Cannot use 'password' and 'generate_password' at the same time.");
    }
    if (!password && !generate_password) {
      throw new Error("Either 'password' or 'generate_password' must be provided.");
    }

    const payload = {
      user: {
        login,
        firstname,
        lastname,
        mail,
        password,
        generate_password,
      },
    };

    try {
      const result = await createUser(payload);
      return result.user;
    } catch (error: any) {
      // Provide a more informative error message for the agent
      const errorMessage = error.response?.data?.errors?.join(", ") || error.message;
      throw new Error(`Failed to create user: ${errorMessage}`);
    }
  },
};

export const getUserTool: Tool = {
  name: "redmine_get-user",
  description: "Retrieves a single user from Redmine by their ID.",
  parameters: z.object({
    id: z.string().describe("The numeric ID of the user to retrieve."),
  }),
  execute: async ({ id }) => {
    try {
      const result = await getUser(id);
      return result.user;
    } catch (error: any) {
      const errorMessage = error.response?.data?.errors?.join(", ") || error.message;
      throw new Error(`Failed to retrieve user ${id}: ${errorMessage}`);
    }
  },
};

export const listUsersTool: Tool = {
  name: "redmine_list-users",
  description: "Retrieves a list of users from Redmine. This is an admin-only function.",
  parameters: z.object({}),
  execute: async () => {
    try {
      const result = await listUsers();
      return result.users;
    } catch (error: any) {
      const errorMessage = error.response?.data?.errors?.join(", ") || error.message;
      throw new Error(`Failed to list users: ${errorMessage}`);
    }
  },
};

export const updateUserTool: Tool = {
  name: "redmine_update-user",
  description: "Updates an existing user in Redmine.",
  parameters: z.object({
    id: z.string().describe("The ID of the user to update."),
    login: z.string().optional().describe("The user's new login name."),
    firstname: z.string().optional().describe("The user's new first name."),
    lastname: z.string().optional().describe("The user's new last name."),
    mail: z.string().email().optional().describe("The user's new email address."),
    password: z
      .string()
      .min(8)
      .optional()
      .describe("The user's new password. Must be at least 8 characters."),
  }),
  execute: async ({ id, ...updateData }) => {
    const payload = {
      user: updateData,
    };
    try {
      await updateUser(id, payload);
      return { success: true, message: `User ${id} updated successfully.` };
    } catch (error: any) {
      const errorMessage = error.response?.data?.errors?.join(", ") || error.message;
      throw new Error(`Failed to update user ${id}: ${errorMessage}`);
    }
  },
};

export const deleteUserTool: Tool = {
  name: "redmine_delete-user",
  description: "Deletes a user from Redmine.",
  parameters: z.object({
    id: z.string().describe("The ID of the user to delete."),
  }),
  execute: async ({ id }) => {
    try {
      await deleteUser(id);
      return { success: true, message: `User ${id} deleted successfully.` };
    } catch (error: any) {
      const errorMessage = error.response?.data?.errors?.join(", ") || error.message;
      throw new Error(`Failed to delete user ${id}: ${errorMessage}`);
    }
  },
};
